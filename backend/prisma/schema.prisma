// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODÈLES DE SÉCURITÉ ET UTILISATEURS ---

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  roles     Role[]   @relation("UserRoles")
  refreshTokens RefreshToken[]
  mfaSecret String?
  pdvId     String?  // Relation vers PDV pour multi-PDV
  pdv       PDV?     @relation(fields: [pdvId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique // ex: "product:create", "user:delete"
  description String?
  roles       Role[] @relation("RolePermissions")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique // ex: "Administrateur", "Caissier"
  description String?
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
  discountCap Decimal?     // Pour remises par rôle
}

// --- MODÈLES MÉTIER (PRODUITS & STOCKS) ---

model Product {
  id          String       @id @default(cuid())
  name        String
  description String?
  sku         String       @unique // Stock Keeping Unit - code article unique
  barcode     String?      @unique // Code-barres
  price       Float
  cost        Float?       // Prix d'achat

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  stockLevels StockLevel[]
}

// --- MODÈLES PDV ET CONFIG ---

model PDV {
  id        String @id @default(cuid())
  name      String
  location  String?
  timezone  String @default("Africa/Douala")
  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- MODÈLES TIERS ---

model Client {
  id           String         @id @default(cuid())
  name         String
  phone        String         @unique
  category     ClientCategory
  discountRate Decimal        @default(0)
  creditLimit  Decimal?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum ClientCategory {
  GROSSISTE
  REVENDEUR
  DETAIL
}

model Supplier {
  id          String             @id @default(cuid())
  name        String
  contact     String?
  paymentTerms String?
  invoices    SupplierInvoice[]

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model SupplierInvoice {
  id         String   @id @default(cuid())
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  invoiceNumber String @unique
  date       DateTime
  total      Decimal
  items      Json     // Array of line items
  dueDate    DateTime?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// --- MODÈLES STOCK ---

model StockLevel {
  id        String @id @default(cuid())
  quantity  Int    @default(0)
  location  String // Ex: "Magasin Yaoundé", "Entrepôt Douala"

  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, location])
}

model StockMovement {
  id        String      @id @default(cuid())
  productId String
  type      MovementType
  quantity  Int
  reference String?
  createdBy String
  createdAt DateTime    @default(now())
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

model StockAlert {
  id        String     @id @default(cuid())
  productId String
  level     AlertLevel
  createdAt DateTime   @default(now())
  handled   Boolean    @default(false)
}

enum AlertLevel {
  THRESHOLD
  CRITICAL
}

// --- MODÈLES POS ---

model PosSession {
  id             String   @id @default(cuid())
  pdvId          String
  cashierId      String
  openedAt       DateTime @default(now())
  closedAt       DateTime?
  openingBalance Decimal
  closingBalance Decimal?
  status         SessionStatus @default(OPEN)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum SessionStatus {
  OPEN
  CLOSED
}

model Sale {
  id         String   @id @default(cuid())
  sessionId  String
  clientId   String?
  items      Json     // Array of {productId, qty, price}
  total      Decimal
  payments   Payment[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id       String       @id @default(cuid())
  saleId   String
  sale     Sale         @relation(fields: [saleId], references: [id])
  type     PaymentType
  amount   Decimal
  reference String?

  createdAt DateTime    @default(now())
}

enum PaymentType {
  CASH
  MOMO
  CARD
}

// Refresh tokens for user sessions (allow revocation)
model RefreshToken {
  id        String   @id @default(cuid())
  // tokenHash is a SHA-256 hash of the refresh token value. We store the hash
  // instead of the plaintext token to mitigate token leakage from the DB.
  tokenHash String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  revoked   Boolean  @default(false)
  ip        String?  // optional: IP address where token was issued
  userAgent String?  // optional: user agent for auditing
  createdAt DateTime @default(now())
  expiresAt DateTime
}

// Audit logs for admin actions
model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  target    String?
  payload   Json?
  createdAt DateTime @default(now())
}