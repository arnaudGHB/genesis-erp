// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODÈLES DE SÉCURITÉ ET UTILISATEURS ---

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  roles     Role[]   @relation("UserRoles")
  refreshTokens RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique // ex: "product:create", "user:delete"
  description String?
  roles       Role[] @relation("RolePermissions")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique // ex: "Administrateur", "Caissier"
  description String?
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
}

// --- MODÈLES MÉTIER (PRODUITS & STOCKS) ---

model Product {
  id          String       @id @default(cuid())
  name        String
  description String?
  sku         String       @unique // Stock Keeping Unit - code article unique
  barcode     String?      @unique // Code-barres
  price       Float
  cost        Float?       // Prix d'achat

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  stockLevels StockLevel[]
}

model StockLevel {
  id        String @id @default(cuid())
  quantity  Int    @default(0)
  location  String // Ex: "Magasin Yaoundé", "Entrepôt Douala"

  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, location])
}

// Refresh tokens for user sessions (allow revocation)
model RefreshToken {
  id        String   @id @default(cuid())
  // tokenHash is a SHA-256 hash of the refresh token value. We store the hash
  // instead of the plaintext token to mitigate token leakage from the DB.
  tokenHash String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  revoked   Boolean  @default(false)
  ip        String?  // optional: IP address where token was issued
  userAgent String?  // optional: user agent for auditing
  createdAt DateTime @default(now())
  expiresAt DateTime
}